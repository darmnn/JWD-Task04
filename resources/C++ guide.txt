	Цель этой книги — научить писать программы на C++ — самом мощном языке
программирования наших дней. Для освоения представленного здесь материала никакого
предыдущего опыта в области программирования не требуется. Мы начнем с азов, знание
которых позволит читателю осилить сначала фундаментальные понятия языка, а затем и его
ядро. Изучив базовый курс, вы справитесь и с более сложными темами, освоение которых
даст вам право считать себя вполне сложившимся программистом на C++.
Язык C++ — это ключ к современному объектно-ориентированному программированию.
Он создан для разработки высокопроизводительного программного обеспечения и
чрезвычайно популярен среди программистов. Сегодня быть профессиональным
программистом высокого класса означает быть компетентным в C++.
Этот язык не просто популярен. Он обеспечивает концептуальный фундамент, на
который опираются другие языки программирования и многие современные средства
обработки данных. Не случайно ведь потомками C++ стали такие почитаемые языки, как C#
и Java.
Поскольку язык C++ предназначен для профессионального программирования, для
изучения он не самый простой; тем не менее, C++ — самый лучший язык для изучения.
Освоив C++, вы сможете писать профессиональные высокопроизводительные программы.
Кроме того, вы сможете легко изучить такие языки программирования, как C# и Java,
поскольку они используют тот же базовый синтаксис и те же принципы разработки.

	Язык C++ — единственный (из самых значительных) язык программирования, который
может освоить любой программист. Это может показаться очень серьезным заявлением, но
оно — не преувеличение. C++ — это центр притяжения, вокруг которого "вращается" всё
современное программирование. Его синтаксис и принципы разработки определяют суть
объектно-ориентированного программирования. Более того, C++ проложил "лыжню" для
разработки языков будущего. Например, как Java, так и C# — прямые потомки языка C++.
C++ также можно назвать универсальным языком программирования, поскольку он
позволяет программистам обмениваться идеями. Сегодня быть профессиональным
программистом высокого класса означает быть компетентным в C++. C++ — это ключ к
современному программированию.
Приступая к изучению C++, важно знать, как он вписывается в исторический контекст
языков программирования. Понимая, что привело к его созданию, какие принципы
разработки он представляет и что он унаследовал от своих предшественников, вам будет
легче оценить суть новаторства и уникальность средств C++. Именно поэтому в данной
главе вам предлагается сделать краткий экскурс в историю создания языка
программирования C++, заглянуть в его истоки, проанализировать его взаимоотношения с
непосредственным предшественником (С), рассмотреть его возможности (области
применения) и принципы программирования, которые он поддерживает. Здесь также вы
узнаете, какое место занимает C++ среди других языков программирования.

	История создания C++ начинается с языка С. И немудрено: C++ построен на фундаменте
С. C++ и в самом деле представляет собой супермножество языка С. (Все компиляторы C++
можно использовать для компиляции С-программ.) C++ можно назвать расширенной и
улучшенной версией языка С, в которой реализованы принципы объектно-
ориентированного программирования. C++ также включает ряд других усовершенствований
языка С, например расширенный набор библиотечных функций. При этом "вкус и запах"
C++ унаследовал непосредственно из языка С. Чтобы до конца понять и оценить
достоинства C++, необходимо понять все "как" и "почему" в отношении языка С.

	Поскольку именно принципы объектно-ориентированного программирования были
основополагающими для разработки C++, важно точно определить, что они собой
представляют. Объектно-ориентированное программирование объединило лучшие идеи
структурированного с рядом мощных концепций, которые способствуют более эффективной
организации программ. Объектно-ориентированный подход к программированию позволяет
разложить задачу на составные части таким образом, что каждая составная часть будет
представлять собой самостоятельный объект, который содержит собственные инструкции и
данные. При таком подходе существенно понижается общий уровень сложности программ,
что позволяет программисту справляться с более сложными программами, чем раньше (то есть
написанными при использовании структурированного программирования).
Все языки объектно-ориентированного программирования характеризуются тремя
общими признаками: инкапсуляцией, полиморфизмом и наследованием. Рассмотрим кратко
каждый из них (подробно они будут описаны ниже в этой книге).

	Ни для кого не секрет, что все программы, как правило, состоят из двух основных
элементов: инструкций (кода) и данных. Код — это часть программы, которая выполняет
действия, а данные представляют собой информацию, на которую направлены эти действия.
Инкапсуляция — это такой механизм программирования, который связывает воедино код и
данные, которые он обрабатывает, чтобы обезопасить их как от внешнего вмешательства,
так и от неправильного использования.
В объектно-ориентированном языке код и данные могут быть связаны способом, при
котором создается самостоятельный черный ящик. В этом "ящике" содержатся все
необходимые (для обеспечения самостоятельности) данные и код. При таком связывании
кода и данных создается объект, то есть объект — это конструкция, которая поддерживает
инкапсуляцию.
	Внутри объекта, код, данные или обе эти составляющие могут быть закрытыми в
"рамках" этого объекта или открытыми. Закрытый код (или данные) известен и доступен
только другим частям того же объекта. Другими словами, к закрытому коду или данным не
может получить доступ та часть программы, которая существует вне этого объекта.
Открытый код (или данные) доступен любым другим частям программы, даже если они
определены в других объектах. Обычно открытые части объекта используются для
предоставления управляемого интерфейса с закрытыми элементами объекта.

	Полиморфизм (от греческого слова polymorphism, означающего "много форм") — это
свойство, позволяющее использовать один интерфейс для целого класса действий.
Конкретное действие определяется характерными признаками ситуации. В качестве
простого примера полиморфизма можно привести руль автомобиля. Для руля (то есть
интерфейса) безразлично, какой тип рулевого механизма используется в автомобиле.
Другим словами, руль работает одинаково, независимо от того, оснащен ли автомобиль
рулевым управлением прямого действия (без усилителя), рулевым управлением с
усилителем или механизмом реечной передачи. Если вы знаете, как обращаться с рулем, вы
сможете вести автомобиль любого типа. Тот же принцип можно применить к
программированию. Рассмотрим, например, стек, или список, добавление и удаление
элементов к которому осуществляется по принципу "последним прибыл — первым
обслужен". У вас может быть программа, в которой используются три различных типа стека.
Один стек предназначен для целочисленных значений, второй — для значений с плавающей
точкой и третий — для символов. Алгоритм реализации всех стеков — один и тот же,
несмотря на то, что в них хранятся данные различных типов. В необъектно-
ориентированном языке программисту пришлось бы создать три различных набора
подпрограмм обслуживания стека, причем подпрограммы должны были бы иметь
различные имена, а каждый набор — собственный интерфейс. Но благодаря полиморфизму
в C++ можно создать один общий набор подпрограмм (один интерфейс), который подходит
для всех трех конкретных ситуаций. Таким образом, зная, как использовать один стек, вы
можете использовать все остальные.
В более общем виде концепция полиморфизма выражается фразой "один интерфейс —
много методов". Это означает, что для группы связанных действий можно использовать
один обобщенный интерфейс. Полиморфизм позволяет понизить уровень сложности за счет
возможности применения одного и того же интерфейса для задания целого класса действий.
Выбор же конкретного действия (то есть функции) применительно к той или иной ситуации
ложится "на плечи" компилятора. Вам, как программисту, не нужно делать этот выбор
вручную. Ваша задача — использовать общий интерфейс.
Первые языки объектно-ориентированного программирования были реализованы в виде
интерпретаторов, поэтому полиморфизм поддерживался во время выполнения программ.
Однако C++ — это транслируемый язык (в отличие от интерпретируемого). Следовательно,
в C++ полиморфизм поддерживается на уровне как компиляции программы, так и ее
выполнения.